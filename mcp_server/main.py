# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T02:36:37+00:00



import argparse
import json
import os
from typing import *
from typing import Optional

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import BaseSecurity, UnsuportedSecurityStub
from fastapi import Query

from models import (
    Alt,
    FieldXgafv,
    GooglePlayDeveloperReportingV1beta1ListAnomaliesResponse,
    GooglePlayDeveloperReportingV1beta1QueryStuckBackgroundWakelockRateMetricSetRequest,
    GooglePlayDeveloperReportingV1beta1QueryStuckBackgroundWakelockRateMetricSetResponse,
    GooglePlayDeveloperReportingV1beta1SearchErrorIssuesResponse,
    GooglePlayDeveloperReportingV1beta1SearchErrorReportsResponse,
    GooglePlayDeveloperReportingV1beta1StuckBackgroundWakelockRateMetricSet,
)

app = MCPProxy(
    contact={'name': 'Google', 'url': 'https://google.com', 'x-twitter': 'youtube'},
    description='',
    license={
        'name': 'Creative Commons Attribution 3.0',
        'url': 'http://creativecommons.org/licenses/by/3.0/',
    },
    termsOfService='https://developers.google.com/terms/',
    title='Google Play Developer Reporting API',
    version='v1beta1',
    servers=[{'url': 'https://playdeveloperreporting.googleapis.com/'}],
)


@app.get(
    '/v1beta1/{name}',
    description=""" Describes the properties of the metric set. """,
    tags=['developer_reporting_metrics', 'developer_error_reporting'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def playdeveloperreporting_vitals_stuckbackgroundwakelockrate_get(
    name: str,
    field__xgafv: Optional[FieldXgafv] = Query(None, alias='$.xgafv'),
    access_token: Optional[str] = None,
    alt: Optional[Alt] = None,
    callback: Optional[str] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    upload_protocol: Optional[str] = None,
    upload_type: Optional[str] = Query(None, alias='uploadType'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v1beta1/{name}:query',
    description=""" Queries the metrics in the metric set. """,
    tags=[
        'developer_reporting_metrics',
        'developer_reporting_anomaly_tracking',
        'developer_error_reporting',
    ],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def playdeveloperreporting_vitals_stuckbackgroundwakelockrate_query(
    name: str,
    field__xgafv: Optional[FieldXgafv] = Query(None, alias='$.xgafv'),
    access_token: Optional[str] = None,
    alt: Optional[Alt] = None,
    callback: Optional[str] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    upload_protocol: Optional[str] = None,
    upload_type: Optional[str] = Query(None, alias='uploadType'),
    body: GooglePlayDeveloperReportingV1beta1QueryStuckBackgroundWakelockRateMetricSetRequest = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v1beta1/{parent}/anomalies',
    description=""" Lists anomalies in any of the datasets. """,
    tags=[
        'developer_reporting_metrics',
        'developer_reporting_anomaly_tracking',
        'developer_error_reporting',
    ],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def playdeveloperreporting_anomalies_list(
    parent: str,
    filter: Optional[str] = None,
    page_size: Optional[int] = Query(None, alias='pageSize'),
    page_token: Optional[str] = Query(None, alias='pageToken'),
    field__xgafv: Optional[FieldXgafv] = Query(None, alias='$.xgafv'),
    access_token: Optional[str] = None,
    alt: Optional[Alt] = None,
    callback: Optional[str] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    upload_protocol: Optional[str] = None,
    upload_type: Optional[str] = Query(None, alias='uploadType'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v1beta1/{parent}/errorIssues:search',
    description=""" Searches all error issues in which reports have been grouped. """,
    tags=[
        'developer_reporting_metrics',
        'developer_reporting_anomaly_tracking',
        'developer_error_reporting',
    ],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def playdeveloperreporting_vitals_errors_issues_search(
    parent: str,
    filter: Optional[str] = None,
    interval_end_time_day: Optional[int] = Query(None, alias='interval.endTime.day'),
    interval_end_time_hours: Optional[int] = Query(
        None, alias='interval.endTime.hours'
    ),
    interval_end_time_minutes: Optional[int] = Query(
        None, alias='interval.endTime.minutes'
    ),
    interval_end_time_month: Optional[int] = Query(
        None, alias='interval.endTime.month'
    ),
    interval_end_time_nanos: Optional[int] = Query(
        None, alias='interval.endTime.nanos'
    ),
    interval_end_time_seconds: Optional[int] = Query(
        None, alias='interval.endTime.seconds'
    ),
    interval_end_time_time_zone_id: Optional[str] = Query(
        None, alias='interval.endTime.timeZone.id'
    ),
    interval_end_time_time_zone_version: Optional[str] = Query(
        None, alias='interval.endTime.timeZone.version'
    ),
    interval_end_time_utc_offset: Optional[str] = Query(
        None, alias='interval.endTime.utcOffset'
    ),
    interval_end_time_year: Optional[int] = Query(None, alias='interval.endTime.year'),
    interval_start_time_day: Optional[int] = Query(
        None, alias='interval.startTime.day'
    ),
    interval_start_time_hours: Optional[int] = Query(
        None, alias='interval.startTime.hours'
    ),
    interval_start_time_minutes: Optional[int] = Query(
        None, alias='interval.startTime.minutes'
    ),
    interval_start_time_month: Optional[int] = Query(
        None, alias='interval.startTime.month'
    ),
    interval_start_time_nanos: Optional[int] = Query(
        None, alias='interval.startTime.nanos'
    ),
    interval_start_time_seconds: Optional[int] = Query(
        None, alias='interval.startTime.seconds'
    ),
    interval_start_time_time_zone_id: Optional[str] = Query(
        None, alias='interval.startTime.timeZone.id'
    ),
    interval_start_time_time_zone_version: Optional[str] = Query(
        None, alias='interval.startTime.timeZone.version'
    ),
    interval_start_time_utc_offset: Optional[str] = Query(
        None, alias='interval.startTime.utcOffset'
    ),
    interval_start_time_year: Optional[int] = Query(
        None, alias='interval.startTime.year'
    ),
    page_size: Optional[int] = Query(None, alias='pageSize'),
    page_token: Optional[str] = Query(None, alias='pageToken'),
    field__xgafv: Optional[FieldXgafv] = Query(None, alias='$.xgafv'),
    access_token: Optional[str] = None,
    alt: Optional[Alt] = None,
    callback: Optional[str] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    upload_protocol: Optional[str] = None,
    upload_type: Optional[str] = Query(None, alias='uploadType'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v1beta1/{parent}/errorReports:search',
    description=""" Searches all error reports received for an app. """,
    tags=[
        'developer_reporting_metrics',
        'developer_reporting_anomaly_tracking',
        'developer_error_reporting',
    ],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def playdeveloperreporting_vitals_errors_reports_search(
    parent: str,
    filter: Optional[str] = None,
    interval_end_time_day: Optional[int] = Query(None, alias='interval.endTime.day'),
    interval_end_time_hours: Optional[int] = Query(
        None, alias='interval.endTime.hours'
    ),
    interval_end_time_minutes: Optional[int] = Query(
        None, alias='interval.endTime.minutes'
    ),
    interval_end_time_month: Optional[int] = Query(
        None, alias='interval.endTime.month'
    ),
    interval_end_time_nanos: Optional[int] = Query(
        None, alias='interval.endTime.nanos'
    ),
    interval_end_time_seconds: Optional[int] = Query(
        None, alias='interval.endTime.seconds'
    ),
    interval_end_time_time_zone_id: Optional[str] = Query(
        None, alias='interval.endTime.timeZone.id'
    ),
    interval_end_time_time_zone_version: Optional[str] = Query(
        None, alias='interval.endTime.timeZone.version'
    ),
    interval_end_time_utc_offset: Optional[str] = Query(
        None, alias='interval.endTime.utcOffset'
    ),
    interval_end_time_year: Optional[int] = Query(None, alias='interval.endTime.year'),
    interval_start_time_day: Optional[int] = Query(
        None, alias='interval.startTime.day'
    ),
    interval_start_time_hours: Optional[int] = Query(
        None, alias='interval.startTime.hours'
    ),
    interval_start_time_minutes: Optional[int] = Query(
        None, alias='interval.startTime.minutes'
    ),
    interval_start_time_month: Optional[int] = Query(
        None, alias='interval.startTime.month'
    ),
    interval_start_time_nanos: Optional[int] = Query(
        None, alias='interval.startTime.nanos'
    ),
    interval_start_time_seconds: Optional[int] = Query(
        None, alias='interval.startTime.seconds'
    ),
    interval_start_time_time_zone_id: Optional[str] = Query(
        None, alias='interval.startTime.timeZone.id'
    ),
    interval_start_time_time_zone_version: Optional[str] = Query(
        None, alias='interval.startTime.timeZone.version'
    ),
    interval_start_time_utc_offset: Optional[str] = Query(
        None, alias='interval.startTime.utcOffset'
    ),
    interval_start_time_year: Optional[int] = Query(
        None, alias='interval.startTime.year'
    ),
    page_size: Optional[int] = Query(None, alias='pageSize'),
    page_token: Optional[str] = Query(None, alias='pageToken'),
    field__xgafv: Optional[FieldXgafv] = Query(None, alias='$.xgafv'),
    access_token: Optional[str] = None,
    alt: Optional[Alt] = None,
    callback: Optional[str] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    upload_protocol: Optional[str] = None,
    upload_type: Optional[str] = Query(None, alias='uploadType'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
