# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T02:36:37+00:00

from __future__ import annotations

from enum import Enum
from typing import List, Optional

from pydantic import BaseModel, Field


class GooglePlayDeveloperReportingV1beta1DimensionValue(BaseModel):
    dimension: Optional[str] = Field(None, description='Name of the dimension.')
    int64Value: Optional[str] = Field(
        None, description='Actual value, represented as an int64.'
    )
    stringValue: Optional[str] = Field(
        None, description='Actual value, represented as a string.'
    )
    valueLabel: Optional[str] = Field(
        None,
        description="Optional. Human-friendly label for the value, always in English. For example, 'Spain' for the 'ES' country code. Whereas the dimension value is stable, this value label is subject to change. Do not assume that the (value, value_label) relationship is stable. For example, the ISO country code 'MK' changed its name recently to 'North Macedonia'.",
    )


class Type(Enum):
    ERROR_TYPE_UNSPECIFIED = 'ERROR_TYPE_UNSPECIFIED'
    APPLICATION_NOT_RESPONDING = 'APPLICATION_NOT_RESPONDING'
    CRASH = 'CRASH'


class GooglePlayDeveloperReportingV1beta1ErrorIssue(BaseModel):
    cause: Optional[str] = Field(
        None,
        description="Cause of the issue. Depending on the type this can be either: * APPLICATION_NOT_RESPONDING: the type of ANR that occurred, e.g., 'Input dispatching timed out'. * CRASH: for Java unhandled exception errors, the type of the innermost exception that was thrown, e.g., IllegalArgumentException. For signals in native code, the signal that was raised, e.g. SIGSEGV.",
    )
    location: Optional[str] = Field(
        None,
        description='Location where the issue happened. Depending on the type this can be either: * APPLICATION_NOT_RESPONDING: the name of the activity or service that stopped responding. * CRASH: the likely method name that caused the error.',
    )
    name: Optional[str] = Field(
        None,
        description='The resource name of the issue. Format: apps/{app}/errorIssues/{issue}',
    )
    type: Optional[Type] = Field(
        None, description='Type of the errors grouped in this issue.'
    )


class GooglePlayDeveloperReportingV1beta1ErrorReport(BaseModel):
    issue: Optional[str] = Field(
        None,
        description='The issue this report was associated with. **Please note:** this resource is currently in Alpha. There could be changes to the issue grouping that would result in similar but more recent error reports being assigned to a different issue.',
    )
    name: Optional[str] = Field(
        None,
        description='The resource name of the report. Format: apps/{app}/errorReports/{report}',
    )
    reportText: Optional[str] = Field(
        None,
        description="Textual representation of the error report. These textual reports are produced by the platform. The reports are then sanitized and filtered to remove any potentially sensitive information. Although their format is fairly stable, they are not entirely meant for machine consumption and we cannot guarantee that there won't be subtle changes to the formatting that may break systems trying to parse information out of the reports.",
    )
    type: Optional[Type] = Field(
        None, description='Type of the error for which this report was generated.'
    )


class AggregationPeriod(Enum):
    AGGREGATION_PERIOD_UNSPECIFIED = 'AGGREGATION_PERIOD_UNSPECIFIED'
    HOURLY = 'HOURLY'
    DAILY = 'DAILY'


class UserCohort(Enum):
    USER_COHORT_UNSPECIFIED = 'USER_COHORT_UNSPECIFIED'
    OS_PUBLIC = 'OS_PUBLIC'
    OS_BETA = 'OS_BETA'
    APP_TESTERS = 'APP_TESTERS'


class GooglePlayDeveloperReportingV1beta1SearchErrorIssuesResponse(BaseModel):
    errorIssues: Optional[List[GooglePlayDeveloperReportingV1beta1ErrorIssue]] = Field(
        None, description='ErrorIssues that were found.'
    )
    nextPageToken: Optional[str] = Field(
        None, description='Continuation token to fetch the next page of data.'
    )


class GooglePlayDeveloperReportingV1beta1SearchErrorReportsResponse(BaseModel):
    errorReports: Optional[List[GooglePlayDeveloperReportingV1beta1ErrorReport]] = (
        Field(None, description='Error reports that were found.')
    )
    nextPageToken: Optional[str] = Field(
        None, description='Page token to fetch the next page of reports.'
    )


class GoogleTypeDecimal(BaseModel):
    value: Optional[str] = Field(
        None,
        description='The decimal value, as a string. The string representation consists of an optional sign, `+` (`U+002B`) or `-` (`U+002D`), followed by a sequence of zero or more decimal digits ("the integer"), optionally followed by a fraction, optionally followed by an exponent. An empty string **should** be interpreted as `0`. The fraction consists of a decimal point followed by zero or more decimal digits. The string must contain at least one digit in either the integer or the fraction. The number formed by the sign, the integer and the fraction is referred to as the significand. The exponent consists of the character `e` (`U+0065`) or `E` (`U+0045`) followed by one or more decimal digits. Services **should** normalize decimal values before storing them by: - Removing an explicitly-provided `+` sign (`+2.5` -> `2.5`). - Replacing a zero-length integer value with `0` (`.5` -> `0.5`). - Coercing the exponent character to upper-case, with explicit sign (`2.5e8` -> `2.5E+8`). - Removing an explicitly-provided zero exponent (`2.5E0` -> `2.5`). Services **may** perform additional normalization based on its own needs and the internal decimal implementation selected, such as shifting the decimal point and exponent value together (example: `2.5E-1` <-> `0.25`). Additionally, services **may** preserve trailing zeroes in the fraction to indicate increased precision, but are not required to do so. Note that only the `.` character is supported to divide the integer and the fraction; `,` **should not** be supported regardless of locale. Additionally, thousand separators **should not** be supported. If a service does support them, values **must** be normalized. The ENBF grammar is: DecimalString = \'\' | [Sign] Significand [Exponent]; Sign = \'+\' | \'-\'; Significand = Digits \'.\' | [Digits] \'.\' Digits; Exponent = (\'e\' | \'E\') [Sign] Digits; Digits = { \'0\' | \'1\' | \'2\' | \'3\' | \'4\' | \'5\' | \'6\' | \'7\' | \'8\' | \'9\' }; Services **should** clearly document the range of supported values, the maximum supported precision (total number of digits), and, if applicable, the scale (number of digits after the decimal point), as well as how it behaves when receiving out-of-bounds values. Services **may** choose to accept values passed as input even when the value has a higher precision or scale than the service supports, and **should** round the value to fit the supported scale. Alternatively, the service **may** error with `400 Bad Request` (`INVALID_ARGUMENT` in gRPC) if precision would be lost. Services **should** error with `400 Bad Request` (`INVALID_ARGUMENT` in gRPC) if the service receives a value outside of the supported range.',
    )


class GoogleTypeTimeZone(BaseModel):
    id: Optional[str] = Field(
        None, description='IANA Time Zone Database time zone, e.g. "America/New_York".'
    )
    version: Optional[str] = Field(
        None,
        description='Optional. IANA Time Zone Database version number, e.g. "2019a".',
    )


class FieldXgafv(Enum):
    field_1 = '1'
    field_2 = '2'


class Alt(Enum):
    json = 'json'
    media = 'media'
    proto = 'proto'


class GooglePlayDeveloperReportingV1beta1DecimalConfidenceInterval(BaseModel):
    lowerBound: Optional[GoogleTypeDecimal] = Field(
        None, description="The confidence interval's lower bound."
    )
    upperBound: Optional[GoogleTypeDecimal] = Field(
        None, description="The confidence interval's upper bound."
    )


class GooglePlayDeveloperReportingV1beta1MetricValue(BaseModel):
    decimalValue: Optional[GoogleTypeDecimal] = Field(
        None, description='Actual value, represented as a decimal number.'
    )
    decimalValueConfidenceInterval: Optional[
        GooglePlayDeveloperReportingV1beta1DecimalConfidenceInterval
    ] = Field(
        None,
        description='Confidence interval of a value that is of type `type.Decimal`.',
    )
    metric: Optional[str] = Field(None, description='Name of the metric.')


class GoogleTypeDateTime(BaseModel):
    day: Optional[int] = Field(
        None,
        description='Optional. Day of month. Must be from 1 to 31 and valid for the year and month, or 0 if specifying a datetime without a day.',
    )
    hours: Optional[int] = Field(
        None,
        description='Optional. Hours of day in 24 hour format. Should be from 0 to 23, defaults to 0 (midnight). An API may choose to allow the value "24:00:00" for scenarios like business closing time.',
    )
    minutes: Optional[int] = Field(
        None,
        description='Optional. Minutes of hour of day. Must be from 0 to 59, defaults to 0.',
    )
    month: Optional[int] = Field(
        None,
        description='Optional. Month of year. Must be from 1 to 12, or 0 if specifying a datetime without a month.',
    )
    nanos: Optional[int] = Field(
        None,
        description='Optional. Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999, defaults to 0.',
    )
    seconds: Optional[int] = Field(
        None,
        description='Optional. Seconds of minutes of the time. Must normally be from 0 to 59, defaults to 0. An API may allow the value 60 if it allows leap-seconds.',
    )
    timeZone: Optional[GoogleTypeTimeZone] = Field(None, description='Time zone.')
    utcOffset: Optional[str] = Field(
        None,
        description='UTC offset. Must be whole seconds, between -18 hours and +18 hours. For example, a UTC offset of -4:00 would be represented as { seconds: -14400 }.',
    )
    year: Optional[int] = Field(
        None,
        description='Optional. Year of date. Must be from 1 to 9999, or 0 if specifying a datetime without a year.',
    )


class GooglePlayDeveloperReportingV1beta1FreshnessInfoFreshness(BaseModel):
    aggregationPeriod: Optional[AggregationPeriod] = Field(
        None, description='Aggregation period for which data is available.'
    )
    latestEndTime: Optional[GoogleTypeDateTime] = Field(
        None,
        description="Latest end time for which data is available, for the aggregation period. The time is specified in the metric set's default timezone. *Note:* time ranges in TimelineSpec are represented as `start_time, end_time)`. For example, if the latest available timeline data point for a `DAILY` aggregation period is `2021-06-23 00:00:00 America/Los_Angeles`, the value of this field would be `2021-06-24 00:00:00 America/Los_Angeles` so it can be easily reused in [TimelineSpec.end_time.",
    )


class GooglePlayDeveloperReportingV1beta1MetricsRow(BaseModel):
    aggregationPeriod: Optional[AggregationPeriod] = Field(
        None, description='Granularity of the aggregation period of the row.'
    )
    dimensions: Optional[List[GooglePlayDeveloperReportingV1beta1DimensionValue]] = (
        Field(None, description='Dimension columns in the row.')
    )
    metrics: Optional[List[GooglePlayDeveloperReportingV1beta1MetricValue]] = Field(
        None, description='Metric columns in the row.'
    )
    startTime: Optional[GoogleTypeDateTime] = Field(
        None,
        description='Starting date (and time for hourly aggregation) of the period covered by this row.',
    )


class GooglePlayDeveloperReportingV1beta1QueryAnrRateMetricSetResponse(BaseModel):
    nextPageToken: Optional[str] = Field(
        None, description='Continuation token to fetch the next page of data.'
    )
    rows: Optional[List[GooglePlayDeveloperReportingV1beta1MetricsRow]] = Field(
        None, description='Returned rows of data.'
    )


class GooglePlayDeveloperReportingV1beta1QueryCrashRateMetricSetResponse(BaseModel):
    nextPageToken: Optional[str] = Field(
        None, description='Continuation token to fetch the next page of data.'
    )
    rows: Optional[List[GooglePlayDeveloperReportingV1beta1MetricsRow]] = Field(
        None, description='Returned rows of data.'
    )


class GooglePlayDeveloperReportingV1beta1QueryErrorCountMetricSetResponse(BaseModel):
    nextPageToken: Optional[str] = Field(
        None, description='Continuation token to fetch the next page of data.'
    )
    rows: Optional[List[GooglePlayDeveloperReportingV1beta1MetricsRow]] = Field(
        None, description='Returned rows.'
    )


class GooglePlayDeveloperReportingV1beta1QueryExcessiveWakeupRateMetricSetResponse(
    BaseModel
):
    nextPageToken: Optional[str] = Field(
        None, description='Continuation token to fetch the next page of data.'
    )
    rows: Optional[List[GooglePlayDeveloperReportingV1beta1MetricsRow]] = Field(
        None, description='Returned rows of data.'
    )


class GooglePlayDeveloperReportingV1beta1QuerySlowRenderingRateMetricSetResponse(
    BaseModel
):
    nextPageToken: Optional[str] = Field(
        None, description='Continuation token to fetch the next page of data.'
    )
    rows: Optional[List[GooglePlayDeveloperReportingV1beta1MetricsRow]] = Field(
        None, description='Returned rows of data.'
    )


class GooglePlayDeveloperReportingV1beta1QuerySlowStartRateMetricSetResponse(BaseModel):
    nextPageToken: Optional[str] = Field(
        None, description='Continuation token to fetch the next page of data.'
    )
    rows: Optional[List[GooglePlayDeveloperReportingV1beta1MetricsRow]] = Field(
        None, description='Returned rows of data.'
    )


class GooglePlayDeveloperReportingV1beta1QueryStuckBackgroundWakelockRateMetricSetResponse(
    BaseModel
):
    nextPageToken: Optional[str] = Field(
        None, description='Continuation token to fetch the next page of data.'
    )
    rows: Optional[List[GooglePlayDeveloperReportingV1beta1MetricsRow]] = Field(
        None, description='Returned rows of data.'
    )


class GooglePlayDeveloperReportingV1beta1TimelineSpec(BaseModel):
    aggregationPeriod: Optional[AggregationPeriod] = Field(
        None,
        description='Type of the aggregation period of the datapoints in the timeline. Intervals are identified by the date and time at the start of the interval.',
    )
    endTime: Optional[GoogleTypeDateTime] = Field(
        None,
        description='Ending datapoint of the timeline (exclusive). See start_time for restrictions. The timezone of the end point must match the timezone of the start point.',
    )
    startTime: Optional[GoogleTypeDateTime] = Field(
        None,
        description='Starting datapoint of the timeline (inclusive). Must be aligned to the aggregation period as follows: * HOURLY: the \'minutes\', \'seconds\' and \'nanos\' fields must be unset. The time_zone can be left unset (defaults to UTC) or set explicitly to "UTC". Setting any other utc_offset or timezone id will result in a validation error. * DAILY: the \'hours\', \'minutes\', \'seconds\' and \'nanos\' fields must be unset. Different metric sets support different timezones. It can be left unset to use the default timezone specified by the metric set. The timezone of the end point must match the timezone of the start point.',
    )


class GooglePlayDeveloperReportingV1beta1Anomaly(BaseModel):
    dimensions: Optional[List[GooglePlayDeveloperReportingV1beta1DimensionValue]] = (
        Field(
            None,
            description='Combination of dimensions in which the anomaly was detected.',
        )
    )
    metric: Optional[GooglePlayDeveloperReportingV1beta1MetricValue] = Field(
        None,
        description='Metric where the anomaly was detected, together with the anomalous value.',
    )
    metricSet: Optional[str] = Field(
        None, description='Metric set resource where the anomaly was detected.'
    )
    name: Optional[str] = Field(
        None, description='Name of the anomaly. Format: apps/{app}/anomalies/{anomaly}'
    )
    timelineSpec: Optional[GooglePlayDeveloperReportingV1beta1TimelineSpec] = Field(
        None, description='Timeline specification that covers the anomaly period.'
    )


class GooglePlayDeveloperReportingV1beta1FreshnessInfo(BaseModel):
    freshnesses: Optional[
        List[GooglePlayDeveloperReportingV1beta1FreshnessInfoFreshness]
    ] = Field(
        None,
        description='Information about data freshness for every supported aggregation period. This field has set semantics, keyed by the `aggregation_period` field.',
    )


class GooglePlayDeveloperReportingV1beta1ListAnomaliesResponse(BaseModel):
    anomalies: Optional[List[GooglePlayDeveloperReportingV1beta1Anomaly]] = Field(
        None, description='Anomalies that were found.'
    )
    nextPageToken: Optional[str] = Field(
        None, description='Continuation token to fetch the next page of data.'
    )


class GooglePlayDeveloperReportingV1beta1QueryAnrRateMetricSetRequest(BaseModel):
    dimensions: Optional[List[str]] = Field(
        None,
        description='Dimensions to slice the metrics by. **Supported dimensions:** * `apiLevel` (string): the API level of Android that was running on the user\'s device. * `versionCode` (int64): version of the app that was running on the user\'s device. * `deviceModel` (string): unique identifier of the user\'s device model. * `deviceType` (string): the type (also known as form factor) of the user\'s device. * `countryCode` (string): the country or region of the user\'s device based on their IP address, represented as a 2-letter ISO-3166 code (e.g. US for the United States). * `deviceRamBucket` (int64): RAM of the device, in MB, in buckets (3GB, 4GB, etc.). * `deviceSocMake` (string): Make of the device\'s primary system-on-chip, e.g., Samsung. [Reference](https://developer.android.com/reference/android/os/Build#SOC_MANUFACTURER) * `deviceSocModel` (string): Model of the device\'s primary system-on-chip, e.g., "Exynos 2100". [Reference](https://developer.android.com/reference/android/os/Build#SOC_MODEL) * `deviceCpuMake` (string): Make of the device\'s CPU, e.g., Qualcomm. * `deviceCpuModel` (string): Model of the device\'s CPU, e.g., "Kryo 240". * `deviceGpuMake` (string): Make of the device\'s GPU, e.g., ARM. * `deviceGpuModel` (string): Model of the device\'s GPU, e.g., Mali. * `deviceGpuVersion` (string): Version of the device\'s GPU, e.g., T750. * `deviceVulkanVersion` (string): Vulkan version of the device, e.g., "4198400". * `deviceGlEsVersion` (string): OpenGL ES version of the device, e.g., "196610". * `deviceScreenSize` (string): Screen size of the device, e.g., NORMAL, LARGE. * `deviceScreenDpi` (string): Screen density of the device, e.g., mdpi, hdpi.',
    )
    filter: Optional[str] = Field(
        None,
        description='Filters to apply to data. The filtering expression follows [AIP-160](https://google.aip.dev/160) standard and supports filtering by equality of all breakdown dimensions.',
    )
    metrics: Optional[List[str]] = Field(
        None,
        description="Metrics to aggregate. **Supported metrics:** * `anrRate` (`google.type.Decimal`): Percentage of distinct users in the aggregation period that experienced at least one ANR. * `anrRate7dUserWeighted` (`google.type.Decimal`): Rolling average value of `anrRate` in the last 7 days. The daily values are weighted by the count of distinct users for the day. * `anrRate28dUserWeighted` (`google.type.Decimal`): Rolling average value of `anrRate` in the last 28 days. The daily values are weighted by the count of distinct users for the day. * `userPerceivedAnrRate` (`google.type.Decimal`): Percentage of distinct users in the aggregation period that experienced at least one user-perceived ANR. User-perceived ANRs are currently those of 'Input dispatching' type. * `userPerceivedAnrRate7dUserWeighted` (`google.type.Decimal`): Rolling average value of `userPerceivedAnrRate` in the last 7 days. The daily values are weighted by the count of distinct users for the day. * `userPerceivedAnrRate28dUserWeighted` (`google.type.Decimal`): Rolling average value of `userPerceivedAnrRate` in the last 28 days. The daily values are weighted by the count of distinct users for the day. * `distinctUsers` (`google.type.Decimal`): Count of distinct users in the aggregation period that were used as normalization value for the `anrRate` and `userPerceivedAnrRate` metrics. A user is counted in this metric if they used the app in the foreground during the aggregation period. Care must be taken not to aggregate this count further, as it may result in users being counted multiple times. The value is rounded to the nearest multiple of 10, 100, 1,000 or 1,000,000, depending on the magnitude of the value.",
    )
    pageSize: Optional[int] = Field(
        None,
        description='Maximum size of the returned data. If unspecified, at most 1000 rows will be returned. The maximum value is 100,000; values above 100,000 will be coerced to 100,000.',
    )
    pageToken: Optional[str] = Field(
        None,
        description='A page token, received from a previous call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to the request must match the call that provided the page token.',
    )
    timelineSpec: Optional[GooglePlayDeveloperReportingV1beta1TimelineSpec] = Field(
        None,
        description='Specification of the timeline aggregation parameters. **Supported aggregation periods:** * DAILY: metrics are aggregated in calendar date intervals. Due to historical constraints, the default and only supported timezone is `America/Los_Angeles`.',
    )
    userCohort: Optional[UserCohort] = Field(
        None,
        description='User view to select. The output data will correspond to the selected view. **Supported values:** * `OS_PUBLIC` To select data from all publicly released Android versions. This is the default. Supports all the above dimensions. * `APP_TESTERS` To select data from users who have opted in to be testers. Supports all the above dimensions. * `OS_BETA` To select data from beta android versions only, excluding data from released android versions. Only the following dimensions are supported: * `versionCode` (int64): version of the app that was running on the user\'s device. * `osBuild` (string): OS build of the user\'s device, e.g., "T1B2.220916.004".',
    )


class GooglePlayDeveloperReportingV1beta1QueryCrashRateMetricSetRequest(BaseModel):
    dimensions: Optional[List[str]] = Field(
        None,
        description='Dimensions to slice the metrics by. **Supported dimensions:** * `apiLevel` (string): the API level of Android that was running on the user\'s device. * `versionCode` (int64): version of the app that was running on the user\'s device. * `deviceModel` (string): unique identifier of the user\'s device model. * `deviceType` (string): the type (also known as form factor) of the user\'s device. * `countryCode` (string): the country or region of the user\'s device based on their IP address, represented as a 2-letter ISO-3166 code (e.g. US for the United States). * `deviceRamBucket` (int64): RAM of the device, in MB, in buckets (3GB, 4GB, etc.). * `deviceSocMake` (string): Make of the device\'s primary system-on-chip, e.g., Samsung. [Reference](https://developer.android.com/reference/android/os/Build#SOC_MANUFACTURER) * `deviceSocModel` (string): Model of the device\'s primary system-on-chip, e.g., "Exynos 2100". [Reference](https://developer.android.com/reference/android/os/Build#SOC_MODEL) * `deviceCpuMake` (string): Make of the device\'s CPU, e.g., Qualcomm. * `deviceCpuModel` (string): Model of the device\'s CPU, e.g., "Kryo 240". * `deviceGpuMake` (string): Make of the device\'s GPU, e.g., ARM. * `deviceGpuModel` (string): Model of the device\'s GPU, e.g., Mali. * `deviceGpuVersion` (string): Version of the device\'s GPU, e.g., T750. * `deviceVulkanVersion` (string): Vulkan version of the device, e.g., "4198400". * `deviceGlEsVersion` (string): OpenGL ES version of the device, e.g., "196610". * `deviceScreenSize` (string): Screen size of the device, e.g., NORMAL, LARGE. * `deviceScreenDpi` (string): Screen density of the device, e.g., mdpi, hdpi.',
    )
    filter: Optional[str] = Field(
        None,
        description='Filters to apply to data. The filtering expression follows [AIP-160](https://google.aip.dev/160) standard and supports filtering by equality of all breakdown dimensions.',
    )
    metrics: Optional[List[str]] = Field(
        None,
        description='Metrics to aggregate. **Supported metrics:** * `crashRate` (`google.type.Decimal`): Percentage of distinct users in the aggregation period that experienced at least one crash. * `crashRate7dUserWeighted` (`google.type.Decimal`): Rolling average value of `crashRate` in the last 7 days. The daily values are weighted by the count of distinct users for the day. * `crashRate28dUserWeighted` (`google.type.Decimal`): Rolling average value of `crashRate` in the last 28 days. The daily values are weighted by the count of distinct users for the day. * `userPerceivedCrashRate` (`google.type.Decimal`): Percentage of distinct users in the aggregation period that experienced at least one crash while they were actively using your app (a user-perceived crash). An app is considered to be in active use if it is displaying any activity or executing any foreground service. * `userPerceivedCrashRate7dUserWeighted` (`google.type.Decimal`): Rolling average value of `userPerceivedCrashRate` in the last 7 days. The daily values are weighted by the count of distinct users for the day. * `userPerceivedCrashRate28dUserWeighted` (`google.type.Decimal`): Rolling average value of `userPerceivedCrashRate` in the last 28 days. The daily values are weighted by the count of distinct users for the day. * `distinctUsers` (`google.type.Decimal`): Count of distinct users in the aggregation period that were used as normalization value for the `crashRate` and `userPerceivedCrashRate` metrics. A user is counted in this metric if they used the app actively during the aggregation period. An app is considered to be in active use if it is displaying any activity or executing any foreground service. Care must be taken not to aggregate this count further, as it may result in users being counted multiple times. The value is rounded to the nearest multiple of 10, 100, 1,000 or 1,000,000, depending on the magnitude of the value.',
    )
    pageSize: Optional[int] = Field(
        None,
        description='Maximum size of the returned data. If unspecified, at most 1000 rows will be returned. The maximum value is 100,000; values above 100,000 will be coerced to 100,000.',
    )
    pageToken: Optional[str] = Field(
        None,
        description='A page token, received from a previous call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to the request must match the call that provided the page token.',
    )
    timelineSpec: Optional[GooglePlayDeveloperReportingV1beta1TimelineSpec] = Field(
        None,
        description='Specification of the timeline aggregation parameters. **Supported aggregation periods:** * DAILY: metrics are aggregated in calendar date intervals. Due to historical constraints, the default and only supported timezone is `America/Los_Angeles`.',
    )
    userCohort: Optional[UserCohort] = Field(
        None,
        description='User view to select. The output data will correspond to the selected view. **Supported values:** * `OS_PUBLIC` To select data from all publicly released Android versions. This is the default. Supports all the above dimensions. * `APP_TESTERS` To select data from users who have opted in to be testers. Supports all the above dimensions. * `OS_BETA` To select data from beta android versions only, excluding data from released android versions. Only the following dimensions are supported: * `versionCode` (int64): version of the app that was running on the user\'s device. * `osBuild` (string): OS build of the user\'s device, e.g., "T1B2.220916.004".',
    )


class GooglePlayDeveloperReportingV1beta1QueryErrorCountMetricSetRequest(BaseModel):
    dimensions: Optional[List[str]] = Field(
        None,
        description='Dimensions to slice the data by. **Supported dimensions:** * `apiLevel` (string): the API level of Android that was running on the user\'s device. * `versionCode` (int64): version of the app that was running on the user\'s device. * `deviceModel` (string): unique identifier of the user\'s device model. * `deviceType` (string): identifier of the device\'s form factor, e.g., PHONE. * `reportType` (string): the type of error. The value should correspond to one of the possible values in ErrorType. * `issueId` (string): the id an error was assigned to. The value should correspond to the `{issue}` component of the issue name. * `deviceRamBucket` (int64): RAM of the device, in MB, in buckets (3GB, 4GB, etc.). * `deviceSocMake` (string): Make of the device\'s primary system-on-chip, e.g., Samsung. [Reference](https://developer.android.com/reference/android/os/Build#SOC_MANUFACTURER) * `deviceSocModel` (string): Model of the device\'s primary system-on-chip, e.g., "Exynos 2100". [Reference](https://developer.android.com/reference/android/os/Build#SOC_MODEL) * `deviceCpuMake` (string): Make of the device\'s CPU, e.g., Qualcomm. * `deviceCpuModel` (string): Model of the device\'s CPU, e.g., "Kryo 240". * `deviceGpuMake` (string): Make of the device\'s GPU, e.g., ARM. * `deviceGpuModel` (string): Model of the device\'s GPU, e.g., Mali. * `deviceGpuVersion` (string): Version of the device\'s GPU, e.g., T750. * `deviceVulkanVersion` (string): Vulkan version of the device, e.g., "4198400". * `deviceGlEsVersion` (string): OpenGL ES version of the device, e.g., "196610". * `deviceScreenSize` (string): Screen size of the device, e.g., NORMAL, LARGE. * `deviceScreenDpi` (string): Screen density of the device, e.g., mdpi, hdpi.',
    )
    filter: Optional[str] = Field(
        None,
        description='Filters to apply to data. The filtering expression follows [AIP-160](https://google.aip.dev/160) standard and supports filtering by equality of all breakdown dimensions.',
    )
    metrics: Optional[List[str]] = Field(
        None,
        description='Metrics to aggregate. **Supported metrics:** * `errorReportCount` (`google.type.Decimal`): Absolute count of individual error reports that have been received for an app. * `distinctUsers` (`google.type.Decimal`): Count of distinct users for which reports have been received. Care must be taken not to aggregate this count further, as it may result in users being counted multiple times. This value is not rounded, however it may be an approximation.',
    )
    pageSize: Optional[int] = Field(
        None,
        description='Maximum size of the returned data. If unspecified, at most 1000 rows will be returned. The maximum value is 100000; values above 100000 will be coerced to 100000.',
    )
    pageToken: Optional[str] = Field(
        None,
        description='A page token, received from a previous call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to the request must match the call that provided the page token.',
    )
    timelineSpec: Optional[GooglePlayDeveloperReportingV1beta1TimelineSpec] = Field(
        None,
        description='Specification of the timeline aggregation parameters. **Supported aggregation periods:** * DAILY: metrics are aggregated in calendar date intervals. The default and only supported timezone is `America/Los_Angeles`.',
    )


class GooglePlayDeveloperReportingV1beta1QueryExcessiveWakeupRateMetricSetRequest(
    BaseModel
):
    dimensions: Optional[List[str]] = Field(
        None,
        description='Dimensions to slice the data by. **Supported dimensions:** * `apiLevel` (string): the API level of Android that was running on the user\'s device. * `versionCode` (int64): version of the app that was running on the user\'s device. * `deviceModel` (string): unique identifier of the user\'s device model. * `deviceType` (string): the type (also known as form factor) of the user\'s device. * `countryCode` (string): the country or region of the user\'s device based on their IP address, represented as a 2-letter ISO-3166 code (e.g. US for the United States). * `deviceRamBucket` (int64): RAM of the device, in MB, in buckets (3GB, 4GB, etc.). * `deviceSocMake` (string): Make of the device\'s primary system-on-chip, e.g., Samsung. [Reference](https://developer.android.com/reference/android/os/Build#SOC_MANUFACTURER) * `deviceSocModel` (string): Model of the device\'s primary system-on-chip, e.g., "Exynos 2100". [Reference](https://developer.android.com/reference/android/os/Build#SOC_MODEL) * `deviceCpuMake` (string): Make of the device\'s CPU, e.g., Qualcomm. * `deviceCpuModel` (string): Model of the device\'s CPU, e.g., "Kryo 240". * `deviceGpuMake` (string): Make of the device\'s GPU, e.g., ARM. * `deviceGpuModel` (string): Model of the device\'s GPU, e.g., Mali. * `deviceGpuVersion` (string): Version of the device\'s GPU, e.g., T750. * `deviceVulkanVersion` (string): Vulkan version of the device, e.g., "4198400". * `deviceGlEsVersion` (string): OpenGL ES version of the device, e.g., "196610". * `deviceScreenSize` (string): Screen size of the device, e.g., NORMAL, LARGE. * `deviceScreenDpi` (string): Screen density of the device, e.g., mdpi, hdpi.',
    )
    filter: Optional[str] = Field(
        None,
        description='Filters to apply to data. The filtering expression follows [AIP-160](https://google.aip.dev/160) standard and supports filtering by equality of all breakdown dimensions.',
    )
    metrics: Optional[List[str]] = Field(
        None,
        description='Metrics to aggregate. **Supported metrics:** * `excessiveWakeupRate` (`google.type.Decimal`): Percentage of distinct users in the aggregation period that had more than 10 wakeups per hour. * `excessiveWakeupRate7dUserWeighted` (`google.type.Decimal`): Rolling average value of `excessiveWakeupRate` in the last 7 days. The daily values are weighted by the count of distinct users for the day. * `excessiveWakeupRate28dUserWeighted` (`google.type.Decimal`): Rolling average value of `excessiveWakeupRate` in the last 28 days. The daily values are weighted by the count of distinct users for the day. * `distinctUsers` (`google.type.Decimal`): Count of distinct users in the aggregation period that were used as normalization value for the `excessiveWakeupRate` metric. A user is counted in this metric if they app was doing any work on the device, i.e., not just active foreground usage but also background work. Care must be taken not to aggregate this count further, as it may result in users being counted multiple times. The value is rounded to the nearest multiple of 10, 100, 1,000 or 1,000,000, depending on the magnitude of the value.',
    )
    pageSize: Optional[int] = Field(
        None,
        description='Maximum size of the returned data. If unspecified, at most 1000 rows will be returned. The maximum value is 100000; values above 100000 will be coerced to 100000.',
    )
    pageToken: Optional[str] = Field(
        None,
        description='A page token, received from a previous call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to the request must match the call that provided the page token.',
    )
    timelineSpec: Optional[GooglePlayDeveloperReportingV1beta1TimelineSpec] = Field(
        None,
        description='Specification of the timeline aggregation parameters. **Supported aggregation periods:** * DAILY: metrics are aggregated in calendar date intervals. Due to historical constraints, the only supported timezone is `America/Los_Angeles`.',
    )
    userCohort: Optional[UserCohort] = Field(
        None,
        description='User view to select. The output data will correspond to the selected view. **Supported values:** * `OS_PUBLIC` To select data from all publicly released Android versions. This is the default. Supports all the above dimensions. * `APP_TESTERS` To select data from users who have opted in to be testers. Supports all the above dimensions. * `OS_BETA` To select data from beta android versions only, excluding data from released android versions. Only the following dimensions are supported: * `versionCode` (int64): version of the app that was running on the user\'s device. * `osBuild` (string): OS build of the user\'s device, e.g., "T1B2.220916.004".',
    )


class GooglePlayDeveloperReportingV1beta1QuerySlowRenderingRateMetricSetRequest(
    BaseModel
):
    dimensions: Optional[List[str]] = Field(
        None,
        description='Dimensions to slice the data by. **Supported dimensions:** * `apiLevel` (string): the API level of Android that was running on the user\'s device. * `versionCode` (int64): version of the app that was running on the user\'s device. * `deviceModel` (string): unique identifier of the user\'s device model. * `deviceType` (string): the type (also known as form factor) of the user\'s device. * `countryCode` (string): the country or region of the user\'s device based on their IP address, represented as a 2-letter ISO-3166 code (e.g. US for the United States). * `deviceRamBucket` (int64): RAM of the device, in MB, in buckets (3GB, 4GB, etc.). * `deviceSocMake` (string): Make of the device\'s primary system-on-chip, e.g., Samsung. [Reference](https://developer.android.com/reference/android/os/Build#SOC_MANUFACTURER) * `deviceSocModel` (string): Model of the device\'s primary system-on-chip, e.g., "Exynos 2100". [Reference](https://developer.android.com/reference/android/os/Build#SOC_MODEL) * `deviceCpuMake` (string): Make of the device\'s CPU, e.g., Qualcomm. * `deviceCpuModel` (string): Model of the device\'s CPU, e.g., "Kryo 240". * `deviceGpuMake` (string): Make of the device\'s GPU, e.g., ARM. * `deviceGpuModel` (string): Model of the device\'s GPU, e.g., Mali. * `deviceGpuVersion` (string): Version of the device\'s GPU, e.g., T750. * `deviceVulkanVersion` (string): Vulkan version of the device, e.g., "4198400". * `deviceGlEsVersion` (string): OpenGL ES version of the device, e.g., "196610". * `deviceScreenSize` (string): Screen size of the device, e.g., NORMAL, LARGE. * `deviceScreenDpi` (string): Screen density of the device, e.g., mdpi, hdpi.',
    )
    filter: Optional[str] = Field(
        None,
        description='Filters to apply to data. The filtering expression follows [AIP-160](https://google.aip.dev/160) standard and supports filtering by equality of all breakdown dimensions.',
    )
    metrics: Optional[List[str]] = Field(
        None,
        description='Metrics to aggregate. **Supported metrics:** * `slowRenderingRate20Fps` (`google.type.Decimal`): Percentage of distinct users in the aggregation period that had a slow rendering. * `slowRenderingRate20Fps7dUserWeighted` (`google.type.Decimal`): Rolling average value of `slowRenderingRate20Fps` in the last 7 days. The daily values are weighted by the count of distinct users for the day. * `slowRenderingRate20Fps28dUserWeighted` (`google.type.Decimal`): Rolling average value of `slowRenderingRate20Fps` in the last 28 days. The daily values are weighted by the count of distinct users for the day. * `slowRenderingRate30Fps` (`google.type.Decimal`): Percentage of distinct users in the aggregation period that had a slow rendering. * `slowRenderingRate30Fps7dUserWeighted` (`google.type.Decimal`): Rolling average value of `slowRenderingRate30Fps` in the last 7 days. The daily values are weighted by the count of distinct users for the day. * `slowRenderingRate30Fps28dUserWeighted` (`google.type.Decimal`): Rolling average value of `slowRenderingRate30Fps` in the last 28 days. The daily values are weighted by the count of distinct users for the day. * `distinctUsers` (`google.type.Decimal`): Count of distinct users in the aggregation period that were used as normalization value for the `slowRenderingRate20Fps`/`slowRenderingRate30Fps` metric. A user is counted in this metric if their app was launched in the device. Care must be taken not to aggregate this count further, as it may result in users being counted multiple times. The value is rounded to the nearest multiple of 10, 100, 1,000 or 1,000,000, depending on the magnitude of the value.',
    )
    pageSize: Optional[int] = Field(
        None,
        description='Maximum size of the returned data. If unspecified, at most 1000 rows will be returned. The maximum value is 100000; values above 100000 will be coerced to 100000.',
    )
    pageToken: Optional[str] = Field(
        None,
        description='A page token, received from a previous call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to the request must match the call that provided the page token.',
    )
    timelineSpec: Optional[GooglePlayDeveloperReportingV1beta1TimelineSpec] = Field(
        None,
        description='Specification of the timeline aggregation parameters. **Supported aggregation periods:** * DAILY: metrics are aggregated in calendar date intervals. Due to historical constraints, the only supported timezone is `America/Los_Angeles`.',
    )
    userCohort: Optional[UserCohort] = Field(
        None,
        description='User view to select. The output data will correspond to the selected view. **Supported values:** * `OS_PUBLIC` To select data from all publicly released Android versions. This is the default. Supports all the above dimensions. * `APP_TESTERS` To select data from users who have opted in to be testers. Supports all the above dimensions. * `OS_BETA` To select data from beta Android versions only, excluding data from released Android versions. Only the following dimensions are supported: * `versionCode` (int64): version of the app that was running on the user\'s device. * `osBuild` (string): OS build of the user\'s device, e.g., "T1B2.220916.004".',
    )


class GooglePlayDeveloperReportingV1beta1QuerySlowStartRateMetricSetRequest(BaseModel):
    dimensions: Optional[List[str]] = Field(
        None,
        description='Dimensions to slice the data by. **Supported dimensions:** * `apiLevel` (string): the API level of Android that was running on the user\'s device. * `versionCode` (int64): version of the app that was running on the user\'s device. * `deviceModel` (string): unique identifier of the user\'s device model. * `deviceType` (string): the type (also known as form factor) of the user\'s device. * `countryCode` (string): the country or region of the user\'s device based on their IP address, represented as a 2-letter ISO-3166 code (e.g. US for the United States). * `deviceRamBucket` (int64): RAM of the device, in MB, in buckets (3GB, 4GB, etc.). * `deviceSocMake` (string): Make of the device\'s primary system-on-chip, e.g., Samsung. [Reference](https://developer.android.com/reference/android/os/Build#SOC_MANUFACTURER) * `deviceSocModel` (string): Model of the device\'s primary system-on-chip, e.g., "Exynos 2100". [Reference](https://developer.android.com/reference/android/os/Build#SOC_MODEL) * `deviceCpuMake` (string): Make of the device\'s CPU, e.g., Qualcomm. * `deviceCpuModel` (string): Model of the device\'s CPU, e.g., "Kryo 240". * `deviceGpuMake` (string): Make of the device\'s GPU, e.g., ARM. * `deviceGpuModel` (string): Model of the device\'s GPU, e.g., Mali. * `deviceGpuVersion` (string): Version of the device\'s GPU, e.g., T750. * `deviceVulkanVersion` (string): Vulkan version of the device, e.g., "4198400". * `deviceGlEsVersion` (string): OpenGL ES version of the device, e.g., "196610". * `deviceScreenSize` (string): Screen size of the device, e.g., NORMAL, LARGE. * `deviceScreenDpi` (string): Screen density of the device, e.g., mdpi, hdpi.',
    )
    filter: Optional[str] = Field(
        None,
        description='Filters to apply to data. The filtering expression follows [AIP-160](https://google.aip.dev/160) standard and supports filtering by equality of all breakdown dimensions.',
    )
    metrics: Optional[List[str]] = Field(
        None,
        description='Metrics to aggregate. **Supported metrics:** * `slowStartRate` (`google.type.Decimal`): Percentage of distinct users in the aggregation period that had a slow start. * `slowStartRate7dUserWeighted` (`google.type.Decimal`): Rolling average value of `slowStartRate` in the last 7 days. The daily values are weighted by the count of distinct users for the day. * `slowStartRate28dUserWeighted` (`google.type.Decimal`): Rolling average value of `slowStartRate` in the last 28 days. The daily values are weighted by the count of distinct users for the day. * `distinctUsers` (`google.type.Decimal`): Count of distinct users in the aggregation period that were used as normalization value for the `slowStartRate` metric. A user is counted in this metric if their app was launched in the device. Care must be taken not to aggregate this count further, as it may result in users being counted multiple times. The value is rounded to the nearest multiple of 10, 100, 1,000 or 1,000,000, depending on the magnitude of the value.',
    )
    pageSize: Optional[int] = Field(
        None,
        description='Maximum size of the returned data. If unspecified, at most 1000 rows will be returned. The maximum value is 100000; values above 100000 will be coerced to 100000.',
    )
    pageToken: Optional[str] = Field(
        None,
        description='A page token, received from a previous call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to the request must match the call that provided the page token.',
    )
    timelineSpec: Optional[GooglePlayDeveloperReportingV1beta1TimelineSpec] = Field(
        None,
        description='Specification of the timeline aggregation parameters. **Supported aggregation periods:** * DAILY: metrics are aggregated in calendar date intervals. Due to historical constraints, the only supported timezone is `America/Los_Angeles`.',
    )
    userCohort: Optional[UserCohort] = Field(
        None,
        description='User view to select. The output data will correspond to the selected view. **Supported values:** * `OS_PUBLIC` To select data from all publicly released Android versions. This is the default. Supports all the above dimensions. * `APP_TESTERS` To select data from users who have opted in to be testers. Supports all the above dimensions. * `OS_BETA` To select data from beta Android versions only, excluding data from released Android versions. Only the following dimensions are supported: * `versionCode` (int64): version of the app that was running on the user\'s device. * `osBuild` (string): OS build of the user\'s device, e.g., "T1B2.220916.004".',
    )


class GooglePlayDeveloperReportingV1beta1QueryStuckBackgroundWakelockRateMetricSetRequest(
    BaseModel
):
    dimensions: Optional[List[str]] = Field(
        None,
        description='Dimensions to slice the data by. **Supported dimensions:** * `apiLevel` (string): the API level of Android that was running on the user\'s device. * `versionCode` (int64): version of the app that was running on the user\'s device. * `deviceModel` (string): unique identifier of the user\'s device model. * `deviceType` (string): the type (also known as form factor) of the user\'s device. * `countryCode` (string): the country or region of the user\'s device based on their IP address, represented as a 2-letter ISO-3166 code (e.g. US for the United States). * `deviceRamBucket` (int64): RAM of the device, in MB, in buckets (3GB, 4GB, etc.). * `deviceSocMake` (string): Make of the device\'s primary system-on-chip, e.g., Samsung. [Reference](https://developer.android.com/reference/android/os/Build#SOC_MANUFACTURER) * `deviceSocModel` (string): Model of the device\'s primary system-on-chip, e.g., "Exynos 2100". [Reference](https://developer.android.com/reference/android/os/Build#SOC_MODEL) * `deviceCpuMake` (string): Make of the device\'s CPU, e.g., Qualcomm. * `deviceCpuModel` (string): Model of the device\'s CPU, e.g., "Kryo 240". * `deviceGpuMake` (string): Make of the device\'s GPU, e.g., ARM. * `deviceGpuModel` (string): Model of the device\'s GPU, e.g., Mali. * `deviceGpuVersion` (string): Version of the device\'s GPU, e.g., T750. * `deviceVulkanVersion` (string): Vulkan version of the device, e.g., "4198400". * `deviceGlEsVersion` (string): OpenGL ES version of the device, e.g., "196610". * `deviceScreenSize` (string): Screen size of the device, e.g., NORMAL, LARGE. * `deviceScreenDpi` (string): Screen density of the device, e.g., mdpi, hdpi.',
    )
    filter: Optional[str] = Field(
        None,
        description='Filters to apply to data. The filtering expression follows [AIP-160](https://google.aip.dev/160) standard and supports filtering by equality of all breakdown dimensions.',
    )
    metrics: Optional[List[str]] = Field(
        None,
        description='Metrics to aggregate. **Supported metrics:** * `stuckBgWakelockRate` (`google.type.Decimal`): Percentage of distinct users in the aggregation period that had a wakelock held in the background for longer than 1 hour. * `stuckBgWakelockRate7dUserWeighted` (`google.type.Decimal`): Rolling average value of `stuckBgWakelockRate` in the last 7 days. The daily values are weighted by the count of distinct users for the day. * `stuckBgWakelockRate28dUserWeighted` (`google.type.Decimal`): Rolling average value of `stuckBgWakelockRate` in the last 28 days. The daily values are weighted by the count of distinct users for the day. * `distinctUsers` (`google.type.Decimal`): Count of distinct users in the aggregation period that were used as normalization value for the `stuckBgWakelockRate` metric. A user is counted in this metric if they app was doing any work on the device, i.e., not just active foreground usage but also background work. Care must be taken not to aggregate this count further, as it may result in users being counted multiple times. The value is rounded to the nearest multiple of 10, 100, 1,000 or 1,000,000, depending on the magnitude of the value.',
    )
    pageSize: Optional[int] = Field(
        None,
        description='Maximum size of the returned data. If unspecified, at most 1000 rows will be returned. The maximum value is 100000; values above 100000 will be coerced to 100000.',
    )
    pageToken: Optional[str] = Field(
        None,
        description='A page token, received from a previous call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to the request must match the call that provided the page token.',
    )
    timelineSpec: Optional[GooglePlayDeveloperReportingV1beta1TimelineSpec] = Field(
        None,
        description='Specification of the timeline aggregation parameters. **Supported aggregation periods:** * DAILY: metrics are aggregated in calendar date intervals. Due to historical constraints, the only supported timezone is `America/Los_Angeles`.',
    )
    userCohort: Optional[UserCohort] = Field(
        None,
        description='User view to select. The output data will correspond to the selected view. **Supported values:** * `OS_PUBLIC` To select data from all publicly released Android versions. This is the default. Supports all the above dimensions. * `APP_TESTERS` To select data from users who have opted in to be testers. Supports all the above dimensions. * `OS_BETA` To select data from beta android versions only, excluding data from released android versions. Only the following dimensions are supported: * `versionCode` (int64): version of the app that was running on the user\'s device. * `osBuild` (string): OS build of the user\'s device, e.g., "T1B2.220916.004".',
    )


class GooglePlayDeveloperReportingV1beta1SlowRenderingRateMetricSet(BaseModel):
    freshnessInfo: Optional[GooglePlayDeveloperReportingV1beta1FreshnessInfo] = Field(
        None, description='Summary about data freshness in this resource.'
    )
    name: Optional[str] = Field(
        None,
        description='The resource name. Format: apps/{app}/slowRenderingRateMetricSet',
    )


class GooglePlayDeveloperReportingV1beta1SlowStartRateMetricSet(BaseModel):
    freshnessInfo: Optional[GooglePlayDeveloperReportingV1beta1FreshnessInfo] = Field(
        None, description='Summary about data freshness in this resource.'
    )
    name: Optional[str] = Field(
        None, description='The resource name. Format: apps/{app}/slowStartRateMetricSet'
    )


class GooglePlayDeveloperReportingV1beta1StuckBackgroundWakelockRateMetricSet(
    BaseModel
):
    freshnessInfo: Optional[GooglePlayDeveloperReportingV1beta1FreshnessInfo] = Field(
        None, description='Summary about data freshness in this resource.'
    )
    name: Optional[str] = Field(
        None,
        description='The resource name. Format: apps/{app}/stuckBackgroundWakelockRateMetricSet',
    )


class GooglePlayDeveloperReportingV1beta1AnrRateMetricSet(BaseModel):
    freshnessInfo: Optional[GooglePlayDeveloperReportingV1beta1FreshnessInfo] = Field(
        None, description='Summary about data freshness in this resource.'
    )
    name: Optional[str] = Field(
        None, description='The resource name. Format: apps/{app}/anrRateMetricSet'
    )


class GooglePlayDeveloperReportingV1beta1CrashRateMetricSet(BaseModel):
    freshnessInfo: Optional[GooglePlayDeveloperReportingV1beta1FreshnessInfo] = Field(
        None, description='Summary about data freshness in this resource.'
    )
    name: Optional[str] = Field(
        None, description='The resource name. Format: apps/{app}/crashRateMetricSet'
    )


class GooglePlayDeveloperReportingV1beta1ErrorCountMetricSet(BaseModel):
    freshnessInfo: Optional[GooglePlayDeveloperReportingV1beta1FreshnessInfo] = Field(
        None, description='Summary about data freshness in this resource.'
    )
    name: Optional[str] = Field(
        None, description='The resource name. Format: apps/{app}/errorCountMetricSet'
    )


class GooglePlayDeveloperReportingV1beta1ExcessiveWakeupRateMetricSet(BaseModel):
    freshnessInfo: Optional[GooglePlayDeveloperReportingV1beta1FreshnessInfo] = Field(
        None, description='Summary about data freshness in this resource.'
    )
    name: Optional[str] = Field(
        None,
        description='The resource name. Format: apps/{app}/excessiveWakeupRateMetricSet',
    )
